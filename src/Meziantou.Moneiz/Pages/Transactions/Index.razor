@page "/accounts/{AccountId:int}/transactions"
@page "/categories/{CategoryId:int}/transactions"
@page "/payees/{PayeeId:int}/transactions"
@inject DatabaseProvider DatabaseProvider
@inject ConfirmService ConfirmService
@inject SettingsProvider SettingsProvider
@inject NavigationManager NavigationManager

@if (account != null)
{
    <h1>Transactions of @account</h1>
}
else
{
    <h1>My transactions</h1>
}

<div class="toolbar">
    <div class="toolbar-left">
        <CreateTransactionLink Account="account">Create transaction</CreateTransactionLink>
        <p>
            <label>
                <input type="checkbox" checked="@showReconciled" @onchange="() => ToggleReconciledVisibility()" /> Show reconciled transactions
            </label>
        </p>
    </div>

    @if (account != null)
    {
        <div class="account-balance">
            <div>
                <span class="account-balance-title">On <UserDate Date="@today" />:</span>
                <Amount value="@database.GetTodayBalance(account)" currency="@account.CurrencyIsoCode" />
            </div>
            <div>
                <span class="account-balance-title">All transactions:</span>
                <Amount value="@database.GetBalance(account)" currency="@account.CurrencyIsoCode" />
            </div>
            <div>
                <span class="account-balance-title">Checked transactions:</span>
                <span id="CheckedBalanceContainer">
                    <Amount value="@database.GetCheckedBalance(account)" currency="@account.CurrencyIsoCode" />
                </span>
            </div>
            <div>
                <span class="account-balance-title">Reconciled transactions:</span>
                <span>
                    <Amount value="@database.GetReconciledBalance(account)" currency="@account.CurrencyIsoCode" />
                </span>
            </div>
            <div>
                <a class="btn btn-primary" @onclick="Reconcile">Reconcile</a>
            </div>
        </div>
    }
</div>

<Repeater Items="transactions?.Skip(pageIndex * pageSize).Take(pageSize)">
    <RepeaterContainerTemplate>
        <table>
            <thead>
                <tr>
                    <th></th>
                    <th>Operation Date</th>
                    <th>Category</th>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Comment</th>
                    <th></th>
                </tr>
            </thead>

            @if (pageIndex > 0)
            {
                <tr>
                    <td colspan="7" class="row-navigation">
                        <a @onclick="() => pageIndex--">Newer transactions</a>
                    </td>
                </tr>
            }

            @context

            @if (HasMorePages())
            {
                <tr>
                    <td colspan="7" class="row-navigation">
                        <a @onclick="() => pageIndex++">Older transactions</a>
                    </td>
                </tr>
            }
        </table>
    </RepeaterContainerTemplate>

    <ItemTemplate Context="transaction">
        <tr>
            <td class="transaction-state">
                @if (transaction.State == TransactionState.Reconciliated)
                {
                    <div class="btn-transaction-status fas fa-check-square" title="@transaction.State"></div>
                }
                else if (transaction.State == TransactionState.Checked)
                {
                    <div class="btn-transaction-status far fa-check-square" title="@transaction.State" @onclick="() => Uncheck(transaction)"></div>
                }
                else
                {
                    <div class="btn-transaction-status far fa-square" title="@transaction.State" @onclick="() => Check(transaction)"></div>
                }
            </td>
            <td><UserDate Date="@transaction.ValueDate" /></td>
            <td title="@transaction.Category">@transaction.Category?.Name</td>
            <td>@transaction.FinalTitle</td>
            <td><Amount Value="@transaction.Amount" Currency="@transaction.Account.CurrencyIsoCode" /></td>
            <td>@transaction.Comment</td>
            <td class="commands">
                <Dropdown>
                    <DropdownItem><CreateTransactionLink DuplicatedTransaction="transaction" class="duplicate">Duplicate</CreateTransactionLink></DropdownItem>
                    <DropdownItem><CreateTransactionLink Transaction="transaction" class="view-transactions">Edit</CreateTransactionLink></DropdownItem>
                    <DropdownItem><button type="button" class="btn-link" @onclick="() => Delete(transaction)">Delete</button></DropdownItem>
                </Dropdown>
            </td>
        </tr>
    </ItemTemplate>
</Repeater>

@code {
    Database database;
    Account account;
    IReadOnlyList<Transaction> transactions;
    int pageIndex = 0;
    int pageSize = 50;
    DateTime today;
    bool showReconciled = true;

    [Parameter]
    public int? AccountId { get; set; }

    [Parameter]
    public int? CategoryId { get; set; }

    [Parameter]
    public int? PayeeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        database = await DatabaseProvider.GetDatabase();
        today = Database.GetToday();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccountId != null)
        {
            showReconciled = await SettingsProvider.GetShowReconciliatedTransactions(AccountId.Value) ?? showReconciled;
        }

        LoadTransactions();
    }

    private async Task ToggleReconciledVisibility()
    {
        showReconciled = !showReconciled;
        await SettingsProvider.SetShowReconciliatedTransactions(AccountId.Value, showReconciled);
        LoadTransactions();
    }

    private async Task Check(Transaction transaction)
    {
        database.CheckTransaction(transaction);
        await DatabaseProvider.Save();
    }

    private async Task Uncheck(Transaction transaction)
    {
        database.UncheckTransaction(transaction);
        await DatabaseProvider.Save();
    }

    private async Task Delete(Transaction transaction)
    {
        if (await ConfirmService.Confirm($"Do you want to delete this transaction?"))
        {
            database.RemoveTransaction(transaction);
            await DatabaseProvider.Save();
            LoadTransactions();
        }
    }

    private bool HasMorePages()
    {
        return transactions.Skip((pageIndex + 1) * pageSize).Any();
    }

    private async Task Reconcile()
    {
        var amount = database.GetCheckedBalance(account).ToString("N2", System.Globalization.CultureInfo.InvariantCulture);
        if (!await ConfirmService.Confirm($"Balance of '{account}': {account?.CurrencyIsoCode}{amount}.\nDo you confirm this balance?"))
            return;

        database.Reconcile(account);
        await DatabaseProvider.Save();
        if (!showReconciled)
        {
            LoadTransactions();
        }
    }

    private void LoadTransactions()
    {
        IEnumerable<Transaction> result = database.Transactions;
        if (!showReconciled)
        {
            result = result.Where(t => !t.ReconciliationDate.HasValue);
        }

        if (AccountId != null)
        {
            account = database.GetAccountById(AccountId);
            result = result.Where(t => t.Account == account);
        }

        if (PayeeId != null)
        {
            var payee = database.GetPayeeById(PayeeId);
            result = result.Where(t => t.Payee == payee);
        }

        if (CategoryId != null)
        {
            var category = database.GetCategoryById(CategoryId);
            result = result.Where(t => t.Category == category);
        }

        transactions = result.OrderByDescending(t => t.ValueDate).ThenBy(t => t.Payee?.Name).ToList();
    }
}